// This file was generated by liblab | https://liblab.com/

package com.swagger.petstore;

import com.swagger.petstore.config.InfluxdbSdkConfig;
import com.swagger.petstore.http.Environment;
import com.swagger.petstore.http.interceptors.DefaultHeadersInterceptor;
import com.swagger.petstore.http.interceptors.RetryInterceptor;
import com.swagger.petstore.services.AuthenticationService;
import com.swagger.petstore.services.CacheDataService;
import com.swagger.petstore.services.CompatibilityEndpointsService;
import com.swagger.petstore.services.DatabaseService;
import com.swagger.petstore.services.ProcessingEngineService;
import com.swagger.petstore.services.QueryDataService;
import com.swagger.petstore.services.ServerInformationService;
import com.swagger.petstore.services.TableService;
import com.swagger.petstore.services.WriteDataService;
import java.util.concurrent.TimeUnit;
import okhttp3.OkHttpClient;

/** The InfluxDB HTTP API for InfluxDB 3 Core provides a programmatic interface for
interacting with InfluxDB 3 Core databases and resources.
Use this API to:

- Write data to InfluxDB 3 Core databases
- Query data using SQL or InfluxQL
- Process data using Processing engine plugins
- Manage databases, tables, and Processing engine triggers
- Perform administrative tasks and access system information

The API includes endpoints under the following paths:
- `/api/v3`: InfluxDB 3 Core native endpoints 
- `/`: Compatibility endpoints for InfluxDB v1 workloads and clients 
- `/api/v2/write`: Compatibility endpoint for InfluxDB v2 workloads and clients

<!-- TODO: verify where to host the spec that users can download.
This documentation is generated from the
[InfluxDB OpenAPI specification](https://raw.githubusercontent.com/influxdata/).
-->
 */
public class InfluxdbSdk {

  public final CompatibilityEndpointsService compatibilityEndpoints;
  public final WriteDataService writeData;
  public final QueryDataService queryData;
  public final ServerInformationService serverInformation;
  public final DatabaseService database;
  public final TableService table;
  public final CacheDataService cacheData;
  public final ProcessingEngineService processingEngine;
  public final AuthenticationService authentication;

  private final InfluxdbSdkConfig config;

  public InfluxdbSdk() {
    // Default configs
    this(InfluxdbSdkConfig.builder().build());
  }

  public InfluxdbSdk(InfluxdbSdkConfig config) {
    this.config = config;

    final OkHttpClient httpClient = new OkHttpClient.Builder()
      .addInterceptor(new DefaultHeadersInterceptor(config))
      .addInterceptor(new RetryInterceptor(config.getRetryConfig()))
      .readTimeout(config.getTimeout(), TimeUnit.MILLISECONDS)
      .build();

    this.compatibilityEndpoints = new CompatibilityEndpointsService(httpClient, config);
    this.writeData = new WriteDataService(httpClient, config);
    this.queryData = new QueryDataService(httpClient, config);
    this.serverInformation = new ServerInformationService(httpClient, config);
    this.database = new DatabaseService(httpClient, config);
    this.table = new TableService(httpClient, config);
    this.cacheData = new CacheDataService(httpClient, config);
    this.processingEngine = new ProcessingEngineService(httpClient, config);
    this.authentication = new AuthenticationService(httpClient, config);
  }

  public void setEnvironment(Environment environment) {
    setBaseUrl(environment.getUrl());
  }

  public void setBaseUrl(String baseUrl) {
    this.config.setBaseUrl(baseUrl);
  }

  public void setAccessToken(String token) {
    this.config.setAccessToken(token);
  }
}
// c029837e0e474b76bc487506e8799df5e3335891efe4fb02bda7a1441840310c
