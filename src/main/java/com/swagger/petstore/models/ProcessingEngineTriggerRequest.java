// This file was generated by liblab | https://liblab.com/

package com.swagger.petstore.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ProcessingEngineTriggerRequest {

  @NonNull
  private String db;

  /**
   * The path and filename of the plugin to execute--for example,
   * `schedule.py` or `endpoints/report.py`.
   * The path can be absolute or relative to the `--plugins-dir` directory configured when starting InfluxDB 3.
   *
   * The plugin file must implement the trigger interface associated with the trigger's specification (`trigger_spec`).
   *
   */
  @NonNull
  @JsonProperty("plugin_filename")
  private String pluginFilename;

  @NonNull
  @JsonProperty("trigger_name")
  private String triggerName;

  /**
   * Specifies when and how the processing engine trigger should be invoked.
   *
   * ## Supported trigger specifications:
   *
   * ### Cron-based scheduling
   * Format: `cron:CRON_EXPRESSION`
   *
   * Uses extended (6-field) cron format (second minute hour day_of_month month day_of_week):
   * ```
   * ┌───────────── second (0-59)
   * │ ┌───────────── minute (0-59)
   * │ │ ┌───────────── hour (0-23)
   * │ │ │ ┌───────────── day of month (1-31)
   * │ │ │ │ ┌───────────── month (1-12)
   * │ │ │ │ │ ┌───────────── day of week (0-6, Sunday=0)
   * │ │ │ │ │ │
   * * * * * * *
   * ```
   * Examples:
   * - `cron:0 0 6 * * 1-5` - Every weekday at 6:00 AM
   * - `cron:0 30 14 * * 5` - Every Friday at 2:30 PM
   * - `cron:0 0 0 1 * *` - First day of every month at midnight
   *
   * ### Interval-based scheduling
   * Format: `every:DURATION`
   *
   * Supported durations: `s` (seconds), `m` (minutes), `h` (hours), `d` (days):
   * - `every:30s` - Every 30 seconds
   * - `every:5m` - Every 5 minutes
   * - `every:1h` - Every hour
   * - `every:1d` - Every day
   *
   * ### Table-based triggers
   * - `all_tables` - Triggers on write events to any table in the database
   * - `table:TABLE_NAME` - Triggers on write events to a specific table
   *
   * ### On-demand triggers
   * Format: `path:ENDPOINT_NAME`
   *
   * Creates an HTTP endpoint `/api/v3/engine/ENDPOINT_NAME` for manual invocation:
   * - `path:hello-world` - Creates endpoint `/api/v3/engine/hello-world`
   * - `path:data-export` - Creates endpoint `/api/v3/engine/data-export`
   *
   */
  @NonNull
  @JsonProperty("trigger_specification")
  private String triggerSpecification;

  /**
   * Optional arguments passed to the plugin.
   */
  @JsonProperty("trigger_arguments")
  private JsonNullable<Object> triggerArguments;

  /**
   * Whether the trigger is disabled.
   */
  @JsonProperty("disabled")
  private JsonNullable<Boolean> disabled;

  @JsonIgnore
  public Object getTriggerArguments() {
    return triggerArguments.orElse(null);
  }

  @JsonIgnore
  public Boolean getDisabled() {
    return disabled.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ProcessingEngineTriggerRequestBuilder {

    private JsonNullable<Object> triggerArguments = JsonNullable.undefined();

    @JsonProperty("trigger_arguments")
    public ProcessingEngineTriggerRequestBuilder triggerArguments(Object value) {
      if (value == null) {
        throw new IllegalStateException("triggerArguments cannot be null");
      }
      this.triggerArguments = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> disabled = JsonNullable.undefined();

    @JsonProperty("disabled")
    public ProcessingEngineTriggerRequestBuilder disabled(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("disabled cannot be null");
      }
      this.disabled = JsonNullable.of(value);
      return this;
    }
  }
}
