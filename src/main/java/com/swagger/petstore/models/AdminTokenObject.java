// This file was generated by liblab | https://liblab.com/

package com.swagger.petstore.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class AdminTokenObject {

  @JsonProperty("id")
  private JsonNullable<Long> id;

  @JsonProperty("name")
  private JsonNullable<String> name;

  @JsonProperty("token")
  private JsonNullable<String> token;

  @JsonProperty("hash")
  private JsonNullable<String> hash;

  @JsonProperty("created_at")
  private JsonNullable<String> createdAt;

  @JsonProperty("expiry")
  private JsonNullable<Object> expiry;

  @JsonIgnore
  public Long getId() {
    return id.orElse(null);
  }

  @JsonIgnore
  public String getName() {
    return name.orElse(null);
  }

  @JsonIgnore
  public String getToken() {
    return token.orElse(null);
  }

  @JsonIgnore
  public String getHash() {
    return hash.orElse(null);
  }

  @JsonIgnore
  public String getCreatedAt() {
    return createdAt.orElse(null);
  }

  @JsonIgnore
  public Object getExpiry() {
    return expiry.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class AdminTokenObjectBuilder {

    private JsonNullable<Long> id = JsonNullable.undefined();

    @JsonProperty("id")
    public AdminTokenObjectBuilder id(Long value) {
      if (value == null) {
        throw new IllegalStateException("id cannot be null");
      }
      this.id = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> name = JsonNullable.undefined();

    @JsonProperty("name")
    public AdminTokenObjectBuilder name(String value) {
      if (value == null) {
        throw new IllegalStateException("name cannot be null");
      }
      this.name = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> token = JsonNullable.undefined();

    @JsonProperty("token")
    public AdminTokenObjectBuilder token(String value) {
      if (value == null) {
        throw new IllegalStateException("token cannot be null");
      }
      this.token = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> hash = JsonNullable.undefined();

    @JsonProperty("hash")
    public AdminTokenObjectBuilder hash(String value) {
      if (value == null) {
        throw new IllegalStateException("hash cannot be null");
      }
      this.hash = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> createdAt = JsonNullable.undefined();

    @JsonProperty("created_at")
    public AdminTokenObjectBuilder createdAt(String value) {
      if (value == null) {
        throw new IllegalStateException("createdAt cannot be null");
      }
      this.createdAt = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Object> expiry = JsonNullable.undefined();

    @JsonProperty("expiry")
    public AdminTokenObjectBuilder expiry(Object value) {
      if (value == null) {
        throw new IllegalStateException("expiry cannot be null");
      }
      this.expiry = JsonNullable.of(value);
      return this;
    }
  }
}
