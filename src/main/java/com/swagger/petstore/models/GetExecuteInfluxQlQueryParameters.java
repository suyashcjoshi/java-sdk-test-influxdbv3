// This file was generated by liblab | https://liblab.com/

package com.swagger.petstore.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class GetExecuteInfluxQlQueryParameters {

  @NonNull
  private String q;

  /**
   * The name of the database.
   *
   * If you provide a query that specifies the database, you can omit the 'db' parameter from your request.
   *
   */
  @JsonProperty("db")
  private JsonNullable<String> db;

  @JsonProperty("format")
  private JsonNullable<String> format;

  /**
   * The content type that the client can understand.
   *
   */
  @JsonProperty("Accept")
  private JsonNullable<GetExecuteQuerySqlAccept> accept;

  @JsonIgnore
  public String getDb() {
    return db.orElse(null);
  }

  @JsonIgnore
  public String getFormat() {
    return format.orElse(null);
  }

  @JsonIgnore
  public GetExecuteQuerySqlAccept getAccept() {
    return accept.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class GetExecuteInfluxQlQueryParametersBuilder {

    private JsonNullable<String> db = JsonNullable.undefined();

    @JsonProperty("db")
    public GetExecuteInfluxQlQueryParametersBuilder db(String value) {
      if (value == null) {
        throw new IllegalStateException("db cannot be null");
      }
      this.db = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> format = JsonNullable.undefined();

    @JsonProperty("format")
    public GetExecuteInfluxQlQueryParametersBuilder format(String value) {
      if (value == null) {
        throw new IllegalStateException("format cannot be null");
      }
      this.format = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<GetExecuteQuerySqlAccept> accept = JsonNullable.undefined();

    @JsonProperty("Accept")
    public GetExecuteInfluxQlQueryParametersBuilder accept(GetExecuteQuerySqlAccept value) {
      if (value == null) {
        throw new IllegalStateException("accept cannot be null");
      }
      this.accept = JsonNullable.of(value);
      return this;
    }
  }
}
