// This file was generated by liblab | https://liblab.com/

package com.swagger.petstore.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class PostExecuteV1QueryParameters {

  /**
   * The content type that the client can understand.
   *
   * If `text/csv` is specified, the `Content-type` response header is `application/csv` and the response is formatted as CSV.
   *
   * Returns an error if the format is invalid or non-UTF8.
   *
   */
  @JsonProperty("Accept")
  private JsonNullable<PostExecuteV1QueryAccept> accept;

  @JsonProperty("requestBody")
  private JsonNullable<PostExecuteV1QueryRequest> requestBody;

  @JsonIgnore
  public PostExecuteV1QueryAccept getAccept() {
    return accept.orElse(null);
  }

  @JsonIgnore
  public PostExecuteV1QueryRequest getRequestBody() {
    return requestBody.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class PostExecuteV1QueryParametersBuilder {

    private JsonNullable<PostExecuteV1QueryAccept> accept = JsonNullable.undefined();

    @JsonProperty("Accept")
    public PostExecuteV1QueryParametersBuilder accept(PostExecuteV1QueryAccept value) {
      if (value == null) {
        throw new IllegalStateException("accept cannot be null");
      }
      this.accept = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<PostExecuteV1QueryRequest> requestBody = JsonNullable.undefined();

    @JsonProperty("requestBody")
    public PostExecuteV1QueryParametersBuilder requestBody(PostExecuteV1QueryRequest value) {
      if (value == null) {
        throw new IllegalStateException("requestBody cannot be null");
      }
      this.requestBody = JsonNullable.of(value);
      return this;
    }
  }
}
