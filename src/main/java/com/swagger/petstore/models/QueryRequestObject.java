// This file was generated by liblab | https://liblab.com/

package com.swagger.petstore.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class QueryRequestObject {

  /**
   * The name of the database to query.
   * Required if the query (`query_str`) doesn't specify the database.
   *
   */
  @NonNull
  private String database;

  /**
   * The query to execute.
   */
  @NonNull
  @JsonProperty("query_str")
  private String queryStr;

  /**
   * The format of the query results.
   */
  @JsonProperty("format")
  private JsonNullable<QueryRequestObjectFormat> format;

  /**
   * Additional parameters for the query.
   * Use this field to pass query parameters.
   *
   */
  @JsonProperty("params")
  private JsonNullable<Object> params;

  @JsonIgnore
  public QueryRequestObjectFormat getFormat() {
    return format.orElse(null);
  }

  @JsonIgnore
  public Object getParams() {
    return params.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class QueryRequestObjectBuilder {

    private JsonNullable<QueryRequestObjectFormat> format = JsonNullable.undefined();

    @JsonProperty("format")
    public QueryRequestObjectBuilder format(QueryRequestObjectFormat value) {
      if (value == null) {
        throw new IllegalStateException("format cannot be null");
      }
      this.format = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Object> params = JsonNullable.undefined();

    @JsonProperty("params")
    public QueryRequestObjectBuilder params(Object value) {
      if (value == null) {
        throw new IllegalStateException("params cannot be null");
      }
      this.params = JsonNullable.of(value);
      return this;
    }
  }
}
