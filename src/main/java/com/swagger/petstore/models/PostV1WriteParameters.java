// This file was generated by liblab | https://liblab.com/

package com.swagger.petstore.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class PostV1WriteParameters {

  /**
   * The name of the database.
   * InfluxDB creates the database if it doesn't already exist, and then
   * writes all points in the batch to the database.
   *
   */
  @NonNull
  private String db;

  /**
   * The precision for unix timestamps in the line protocol batch.
   */
  @NonNull
  private PrecisionWriteCompatibility precision;

  @NonNull
  private String requestBody;

  /**
   * The content type of the request payload.
   *
   */
  @JsonProperty("Content-Type")
  private JsonNullable<LineProtocol> contentType;

  /**
   * The content type that the client can understand.
   * Writes only return a response body if they fail (partially or completely)--for example,
   * due to a syntax problem or type mismatch.
   *
   */
  @JsonProperty("Accept")
  private JsonNullable<PostV1WriteAccept> accept;

  /**
   * The compression applied to the line protocol in the request payload.
   * To send a gzip payload, pass `Content-Encoding: gzip` header.
   *
   */
  @JsonProperty("Content-Encoding")
  private JsonNullable<ContentEncoding> contentEncoding;

  /**
   * The size of the entity-body, in bytes, sent to InfluxDB.
   *
   */
  @JsonProperty("Content-Length")
  private JsonNullable<Long> contentLength;

  @JsonIgnore
  public LineProtocol getContentType() {
    return contentType.orElse(null);
  }

  @JsonIgnore
  public PostV1WriteAccept getAccept() {
    return accept.orElse(null);
  }

  @JsonIgnore
  public ContentEncoding getContentEncoding() {
    return contentEncoding.orElse(null);
  }

  @JsonIgnore
  public Long getContentLength() {
    return contentLength.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class PostV1WriteParametersBuilder {

    private JsonNullable<LineProtocol> contentType = JsonNullable.undefined();

    @JsonProperty("Content-Type")
    public PostV1WriteParametersBuilder contentType(LineProtocol value) {
      if (value == null) {
        throw new IllegalStateException("contentType cannot be null");
      }
      this.contentType = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<PostV1WriteAccept> accept = JsonNullable.undefined();

    @JsonProperty("Accept")
    public PostV1WriteParametersBuilder accept(PostV1WriteAccept value) {
      if (value == null) {
        throw new IllegalStateException("accept cannot be null");
      }
      this.accept = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ContentEncoding> contentEncoding = JsonNullable.undefined();

    @JsonProperty("Content-Encoding")
    public PostV1WriteParametersBuilder contentEncoding(ContentEncoding value) {
      if (value == null) {
        throw new IllegalStateException("contentEncoding cannot be null");
      }
      this.contentEncoding = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> contentLength = JsonNullable.undefined();

    @JsonProperty("Content-Length")
    public PostV1WriteParametersBuilder contentLength(Long value) {
      if (value == null) {
        throw new IllegalStateException("contentLength cannot be null");
      }
      this.contentLength = JsonNullable.of(value);
      return this;
    }
  }
}
