// This file was generated by liblab | https://liblab.com/

package com.swagger.petstore.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class LastCacheCreateRequest {

  @NonNull
  private String db;

  @NonNull
  private String table;

  /**
   * Optional cache name.
   */
  @JsonProperty("name")
  private JsonNullable<String> name;

  /**
   * Optional list of key columns.
   */
  @JsonProperty("key_columns")
  private JsonNullable<List<String>> keyColumns;

  /**
   * Optional list of value columns.
   */
  @JsonProperty("value_columns")
  private JsonNullable<List<String>> valueColumns;

  /**
   * Optional count.
   */
  @JsonProperty("count")
  private JsonNullable<Long> count;

  /**
   * Optional time-to-live in seconds.
   */
  @JsonProperty("ttl")
  private JsonNullable<Long> ttl;

  @JsonIgnore
  public String getName() {
    return name.orElse(null);
  }

  @JsonIgnore
  public List<String> getKeyColumns() {
    return keyColumns.orElse(null);
  }

  @JsonIgnore
  public List<String> getValueColumns() {
    return valueColumns.orElse(null);
  }

  @JsonIgnore
  public Long getCount() {
    return count.orElse(null);
  }

  @JsonIgnore
  public Long getTtl() {
    return ttl.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class LastCacheCreateRequestBuilder {

    private JsonNullable<String> name = JsonNullable.undefined();

    @JsonProperty("name")
    public LastCacheCreateRequestBuilder name(String value) {
      if (value == null) {
        throw new IllegalStateException("name cannot be null");
      }
      this.name = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<List<String>> keyColumns = JsonNullable.undefined();

    @JsonProperty("key_columns")
    public LastCacheCreateRequestBuilder keyColumns(List<String> value) {
      if (value == null) {
        throw new IllegalStateException("keyColumns cannot be null");
      }
      this.keyColumns = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<List<String>> valueColumns = JsonNullable.undefined();

    @JsonProperty("value_columns")
    public LastCacheCreateRequestBuilder valueColumns(List<String> value) {
      if (value == null) {
        throw new IllegalStateException("valueColumns cannot be null");
      }
      this.valueColumns = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> count = JsonNullable.undefined();

    @JsonProperty("count")
    public LastCacheCreateRequestBuilder count(Long value) {
      if (value == null) {
        throw new IllegalStateException("count cannot be null");
      }
      this.count = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> ttl = JsonNullable.undefined();

    @JsonProperty("ttl")
    public LastCacheCreateRequestBuilder ttl(Long value) {
      if (value == null) {
        throw new IllegalStateException("ttl cannot be null");
      }
      this.ttl = JsonNullable.of(value);
      return this;
    }
  }
}
