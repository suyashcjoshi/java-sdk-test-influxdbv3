// This file was generated by liblab | https://liblab.com/

package com.swagger.petstore.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class PostExecuteV1QueryRequest {

  /**
   * The InfluxQL query string.
   */
  @NonNull
  private String q;

  /**
   * The database to query. If not provided, the InfluxQL query string must specify the database.
   */
  @JsonProperty("db")
  private JsonNullable<String> db;

  /**
   * If true, the response is divided into chunks of size `chunk_size`.
   *
   */
  @JsonProperty("chunked")
  private JsonNullable<Boolean> chunked;

  /**
   * The number of records that will go into a chunk.
   * This parameter is only used if `chunked=true`.
   *
   */
  @JsonProperty("chunk_size")
  private JsonNullable<Long> chunkSize;

  /**
   * A unix timestamp precision.
   *
   * - `h` for hours
   * - `m` for minutes
   * - `s` for seconds
   * - `ms` for milliseconds
   * - `u` or `Âµ` for microseconds
   * - `ns` for nanoseconds
   *
   * Formats timestamps as [unix (epoch) timestamps](/influxdb3/core/reference/glossary/#unix-timestamp) with the specified precision
   * instead of [RFC3339 timestamps](/influxdb3/core/reference/glossary/#rfc3339-timestamp) with nanosecond precision.
   *
   */
  @JsonProperty("epoch")
  private JsonNullable<Epoch> epoch;

  /**
   * If true, the JSON response is formatted in a human-readable format.
   *
   */
  @JsonProperty("pretty")
  private JsonNullable<Boolean> pretty;

  @JsonIgnore
  public String getDb() {
    return db.orElse(null);
  }

  @JsonIgnore
  public Boolean getChunked() {
    return chunked.orElse(null);
  }

  @JsonIgnore
  public Long getChunkSize() {
    return chunkSize.orElse(null);
  }

  @JsonIgnore
  public Epoch getEpoch() {
    return epoch.orElse(null);
  }

  @JsonIgnore
  public Boolean getPretty() {
    return pretty.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class PostExecuteV1QueryRequestBuilder {

    private JsonNullable<String> db = JsonNullable.undefined();

    @JsonProperty("db")
    public PostExecuteV1QueryRequestBuilder db(String value) {
      if (value == null) {
        throw new IllegalStateException("db cannot be null");
      }
      this.db = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> chunked = JsonNullable.undefined();

    @JsonProperty("chunked")
    public PostExecuteV1QueryRequestBuilder chunked(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("chunked cannot be null");
      }
      this.chunked = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> chunkSize = JsonNullable.of(10000L);

    @JsonProperty("chunk_size")
    public PostExecuteV1QueryRequestBuilder chunkSize(Long value) {
      if (value == null) {
        throw new IllegalStateException("chunkSize cannot be null");
      }
      this.chunkSize = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Epoch> epoch = JsonNullable.undefined();

    @JsonProperty("epoch")
    public PostExecuteV1QueryRequestBuilder epoch(Epoch value) {
      if (value == null) {
        throw new IllegalStateException("epoch cannot be null");
      }
      this.epoch = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> pretty = JsonNullable.undefined();

    @JsonProperty("pretty")
    public PostExecuteV1QueryRequestBuilder pretty(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("pretty cannot be null");
      }
      this.pretty = JsonNullable.of(value);
      return this;
    }
  }
}
