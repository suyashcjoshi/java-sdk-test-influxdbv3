// This file was generated by liblab | https://liblab.com/

package com.swagger.petstore.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class DistinctCacheCreateRequest {

  @NonNull
  private String db;

  @NonNull
  private String table;

  @NonNull
  private List<String> columns;

  /**
   * Optional cache name.
   */
  @JsonProperty("name")
  private JsonNullable<String> name;

  /**
   * Optional maximum cardinality.
   */
  @JsonProperty("max_cardinality")
  private JsonNullable<Long> maxCardinality;

  /**
   * Optional maximum age in seconds.
   */
  @JsonProperty("max_age")
  private JsonNullable<Long> maxAge;

  @JsonIgnore
  public String getName() {
    return name.orElse(null);
  }

  @JsonIgnore
  public Long getMaxCardinality() {
    return maxCardinality.orElse(null);
  }

  @JsonIgnore
  public Long getMaxAge() {
    return maxAge.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class DistinctCacheCreateRequestBuilder {

    private JsonNullable<String> name = JsonNullable.undefined();

    @JsonProperty("name")
    public DistinctCacheCreateRequestBuilder name(String value) {
      if (value == null) {
        throw new IllegalStateException("name cannot be null");
      }
      this.name = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> maxCardinality = JsonNullable.undefined();

    @JsonProperty("max_cardinality")
    public DistinctCacheCreateRequestBuilder maxCardinality(Long value) {
      if (value == null) {
        throw new IllegalStateException("maxCardinality cannot be null");
      }
      this.maxCardinality = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> maxAge = JsonNullable.undefined();

    @JsonProperty("max_age")
    public DistinctCacheCreateRequestBuilder maxAge(Long value) {
      if (value == null) {
        throw new IllegalStateException("maxAge cannot be null");
      }
      this.maxAge = JsonNullable.of(value);
      return this;
    }
  }
}
