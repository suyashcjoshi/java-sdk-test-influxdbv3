// This file was generated by liblab | https://liblab.com/

package com.swagger.petstore.services;

import com.fasterxml.jackson.core.type.TypeReference;
import com.swagger.petstore.config.InfluxdbSdkConfig;
import com.swagger.petstore.exceptions.ApiError;
import com.swagger.petstore.exceptions.ErrorMessageException;
import com.swagger.petstore.http.Environment;
import com.swagger.petstore.http.HttpMethod;
import com.swagger.petstore.http.ModelConverter;
import com.swagger.petstore.http.util.RequestBuilder;
import com.swagger.petstore.models.AdminTokenObject;
import com.swagger.petstore.models.ErrorMessage;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * AuthenticationService Service
 */
public class AuthenticationService extends BaseService {

  public AuthenticationService(@NonNull OkHttpClient httpClient, InfluxdbSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * Create admin token
   *
   * @return response of {@code AdminTokenObject}
   */
  public AdminTokenObject postCreateAdminToken() throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostCreateAdminTokenRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<AdminTokenObject>() {});
  }

  /**
   * Create admin token
   *
   * @return response of {@code CompletableFuture<AdminTokenObject>}
   */
  public CompletableFuture<AdminTokenObject> postCreateAdminTokenAsync() throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostCreateAdminTokenRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<AdminTokenObject>() {})
    );
  }

  private Request buildPostCreateAdminTokenRequest() {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "api/v3/configure/token/admin"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .build();
  }

  /**
   * Regenerate admin token
   *
   * @return response of {@code AdminTokenObject}
   */
  public AdminTokenObject postRegenerateAdminToken() throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostRegenerateAdminTokenRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<AdminTokenObject>() {});
  }

  /**
   * Regenerate admin token
   *
   * @return response of {@code CompletableFuture<AdminTokenObject>}
   */
  public CompletableFuture<AdminTokenObject> postRegenerateAdminTokenAsync() throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostRegenerateAdminTokenRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<AdminTokenObject>() {})
    );
  }

  private Request buildPostRegenerateAdminTokenRequest() {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "api/v3/configure/token/admin/regenerate"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .build();
  }
}
