// This file was generated by liblab | https://liblab.com/

package com.swagger.petstore.services;

import com.fasterxml.jackson.core.type.TypeReference;
import com.swagger.petstore.config.InfluxdbSdkConfig;
import com.swagger.petstore.exceptions.ApiError;
import com.swagger.petstore.http.Environment;
import com.swagger.petstore.http.HttpMethod;
import com.swagger.petstore.http.ModelConverter;
import com.swagger.petstore.http.util.RequestBuilder;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * ServerInformationService Service
 */
public class ServerInformationService extends BaseService {

  public ServerInformationService(@NonNull OkHttpClient httpClient, InfluxdbSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * Health check
   *
   * @return response of {@code void}
   */
  public void getHealth() throws ApiError {
    Request request = this.buildGetHealthRequest();
    this.execute(request);
  }

  /**
   * Health check
   *
   * @return response of {@code CompletableFuture<Void>}
   */
  public CompletableFuture<Void> getHealthAsync() throws ApiError {
    Request request = this.buildGetHealthRequest();
    return this.executeAsync(request).thenApplyAsync(response -> null);
  }

  private Request buildGetHealthRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "health"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .build();
  }

  /**
   * Health check (v1)
   *
   * @return response of {@code void}
   */
  public void getHealthV1() throws ApiError {
    Request request = this.buildGetHealthV1Request();
    this.execute(request);
  }

  /**
   * Health check (v1)
   *
   * @return response of {@code CompletableFuture<Void>}
   */
  public CompletableFuture<Void> getHealthV1Async() throws ApiError {
    Request request = this.buildGetHealthV1Request();
    return this.executeAsync(request).thenApplyAsync(response -> null);
  }

  private Request buildGetHealthV1Request() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "api/v1/health"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .build();
  }

  /**
   * Ping the server
   *
   * @return response of {@code Object}
   */
  public Object getPing() throws ApiError {
    Request request = this.buildGetPingRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<Object>() {});
  }

  /**
   * Ping the server
   *
   * @return response of {@code CompletableFuture<Object>}
   */
  public CompletableFuture<Object> getPingAsync() throws ApiError {
    Request request = this.buildGetPingRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response -> ModelConverter.convert(response, new TypeReference<Object>() {}));
  }

  private Request buildGetPingRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "ping"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .build();
  }

  /**
   * Metrics
   *
   * @return response of {@code void}
   */
  public void getMetrics() throws ApiError {
    Request request = this.buildGetMetricsRequest();
    this.execute(request);
  }

  /**
   * Metrics
   *
   * @return response of {@code CompletableFuture<Void>}
   */
  public CompletableFuture<Void> getMetricsAsync() throws ApiError {
    Request request = this.buildGetMetricsRequest();
    return this.executeAsync(request).thenApplyAsync(response -> null);
  }

  private Request buildGetMetricsRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "metrics"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .build();
  }
}
