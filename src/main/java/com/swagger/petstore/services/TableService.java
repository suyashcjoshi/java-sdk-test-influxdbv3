// This file was generated by liblab | https://liblab.com/

package com.swagger.petstore.services;

import com.swagger.petstore.config.InfluxdbSdkConfig;
import com.swagger.petstore.exceptions.ApiError;
import com.swagger.petstore.exceptions.ErrorMessageException;
import com.swagger.petstore.http.Environment;
import com.swagger.petstore.http.HttpMethod;
import com.swagger.petstore.http.util.RequestBuilder;
import com.swagger.petstore.models.CreateTableRequest;
import com.swagger.petstore.models.DeleteConfigureTableParameters;
import com.swagger.petstore.models.ErrorMessage;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;

/**
 * TableService Service
 */
public class TableService extends BaseService {

  public TableService(@NonNull OkHttpClient httpClient, InfluxdbSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * Create a table
   *
   * @param createTableRequest {@link CreateTableRequest} Request Body
   * @return response of {@code void}
   */
  public void postConfigureTable(@NonNull CreateTableRequest createTableRequest) throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostConfigureTableRequest(createTableRequest);
    this.execute(request);
  }

  /**
   * Create a table
   *
   * @param createTableRequest {@link CreateTableRequest} Request Body
   * @return response of {@code CompletableFuture<Void>}
   */
  public CompletableFuture<Void> postConfigureTableAsync(@NonNull CreateTableRequest createTableRequest)
    throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostConfigureTableRequest(createTableRequest);
    return this.executeAsync(request).thenApplyAsync(response -> null);
  }

  private Request buildPostConfigureTableRequest(@NonNull CreateTableRequest createTableRequest) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "api/v3/configure/table"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .setJsonContent(createTableRequest)
      .build();
  }

  /**
   * Delete a table
   *
   * @param requestParameters {@link DeleteConfigureTableParameters} Request Parameters Object
   * @return response of {@code void}
   */
  public void deleteConfigureTable(@NonNull DeleteConfigureTableParameters requestParameters) throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildDeleteConfigureTableRequest(requestParameters);
    this.execute(request);
  }

  /**
   * Delete a table
   *
   * @param requestParameters {@link DeleteConfigureTableParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<Void>}
   */
  public CompletableFuture<Void> deleteConfigureTableAsync(@NonNull DeleteConfigureTableParameters requestParameters)
    throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildDeleteConfigureTableRequest(requestParameters);
    return this.executeAsync(request).thenApplyAsync(response -> null);
  }

  private Request buildDeleteConfigureTableRequest(@NonNull DeleteConfigureTableParameters requestParameters) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "api/v3/configure/table"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .setQueryParameter("db", requestParameters.getDb())
      .setQueryParameter("table", requestParameters.getTable())
      .build();
  }
}
