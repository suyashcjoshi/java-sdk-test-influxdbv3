// This file was generated by liblab | https://liblab.com/

package com.swagger.petstore.services;

import com.swagger.petstore.config.InfluxdbSdkConfig;
import com.swagger.petstore.exceptions.ApiError;
import com.swagger.petstore.exceptions.ErrorMessageException;
import com.swagger.petstore.http.Environment;
import com.swagger.petstore.http.HttpMethod;
import com.swagger.petstore.http.util.RequestBuilder;
import com.swagger.petstore.models.DeleteConfigureLastCacheParameters;
import com.swagger.petstore.models.DistinctCacheCreateRequest;
import com.swagger.petstore.models.ErrorMessage;
import com.swagger.petstore.models.LastCacheCreateRequest;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;

/**
 * CacheDataService Service
 */
public class CacheDataService extends BaseService {

  public CacheDataService(@NonNull OkHttpClient httpClient, InfluxdbSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * Create distinct cache
   *
   * @param distinctCacheCreateRequest {@link DistinctCacheCreateRequest} Request Body
   * @return response of {@code void}
   */
  public void postConfigureDistinctCache(@NonNull DistinctCacheCreateRequest distinctCacheCreateRequest)
    throws ApiError {
    Request request = this.buildPostConfigureDistinctCacheRequest(distinctCacheCreateRequest);
    this.execute(request);
  }

  /**
   * Create distinct cache
   *
   * @param distinctCacheCreateRequest {@link DistinctCacheCreateRequest} Request Body
   * @return response of {@code CompletableFuture<Void>}
   */
  public CompletableFuture<Void> postConfigureDistinctCacheAsync(
    @NonNull DistinctCacheCreateRequest distinctCacheCreateRequest
  ) throws ApiError {
    Request request = this.buildPostConfigureDistinctCacheRequest(distinctCacheCreateRequest);
    return this.executeAsync(request).thenApplyAsync(response -> null);
  }

  private Request buildPostConfigureDistinctCacheRequest(
    @NonNull DistinctCacheCreateRequest distinctCacheCreateRequest
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "api/v3/configure/distinct_cache"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .setJsonContent(distinctCacheCreateRequest)
      .build();
  }

  /**
   * Create last cache
   *
   * @param lastCacheCreateRequest {@link LastCacheCreateRequest} Request Body
   * @return response of {@code void}
   */
  public void postConfigureLastCache(@NonNull LastCacheCreateRequest lastCacheCreateRequest) throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostConfigureLastCacheRequest(lastCacheCreateRequest);
    this.execute(request);
  }

  /**
   * Create last cache
   *
   * @param lastCacheCreateRequest {@link LastCacheCreateRequest} Request Body
   * @return response of {@code CompletableFuture<Void>}
   */
  public CompletableFuture<Void> postConfigureLastCacheAsync(@NonNull LastCacheCreateRequest lastCacheCreateRequest)
    throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostConfigureLastCacheRequest(lastCacheCreateRequest);
    return this.executeAsync(request).thenApplyAsync(response -> null);
  }

  private Request buildPostConfigureLastCacheRequest(@NonNull LastCacheCreateRequest lastCacheCreateRequest) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "api/v3/configure/last_cache"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .setJsonContent(lastCacheCreateRequest)
      .build();
  }

  /**
   * Delete last cache
   *
   * @param requestParameters {@link DeleteConfigureLastCacheParameters} Request Parameters Object
   * @return response of {@code void}
   */
  public void deleteConfigureLastCache(@NonNull DeleteConfigureLastCacheParameters requestParameters) throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildDeleteConfigureLastCacheRequest(requestParameters);
    this.execute(request);
  }

  /**
   * Delete last cache
   *
   * @param requestParameters {@link DeleteConfigureLastCacheParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<Void>}
   */
  public CompletableFuture<Void> deleteConfigureLastCacheAsync(
    @NonNull DeleteConfigureLastCacheParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildDeleteConfigureLastCacheRequest(requestParameters);
    return this.executeAsync(request).thenApplyAsync(response -> null);
  }

  private Request buildDeleteConfigureLastCacheRequest(@NonNull DeleteConfigureLastCacheParameters requestParameters) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "api/v3/configure/last_cache"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .setQueryParameter("db", requestParameters.getDb())
      .setQueryParameter("table", requestParameters.getTable())
      .setQueryParameter("name", requestParameters.getName())
      .build();
  }
}
