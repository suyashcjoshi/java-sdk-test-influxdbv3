// This file was generated by liblab | https://liblab.com/

package com.swagger.petstore.services;

import com.fasterxml.jackson.core.type.TypeReference;
import com.swagger.petstore.config.InfluxdbSdkConfig;
import com.swagger.petstore.exceptions.ApiError;
import com.swagger.petstore.exceptions.ErrorMessageException;
import com.swagger.petstore.http.Environment;
import com.swagger.petstore.http.HttpMethod;
import com.swagger.petstore.http.ModelConverter;
import com.swagger.petstore.http.util.RequestBuilder;
import com.swagger.petstore.models.CreateDatabaseRequest;
import com.swagger.petstore.models.DeleteConfigureDatabaseParameters;
import com.swagger.petstore.models.ErrorMessage;
import com.swagger.petstore.models.GetConfigureDatabaseParameters;
import com.swagger.petstore.models.ShowDatabasesResponse;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * DatabaseService Service
 */
public class DatabaseService extends BaseService {

  public DatabaseService(@NonNull OkHttpClient httpClient, InfluxdbSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List databases
   *
   * @param requestParameters {@link GetConfigureDatabaseParameters} Request Parameters Object
   * @return response of {@code ShowDatabasesResponse}
   */
  public ShowDatabasesResponse getConfigureDatabase(@NonNull GetConfigureDatabaseParameters requestParameters)
    throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildGetConfigureDatabaseRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ShowDatabasesResponse>() {});
  }

  /**
   * List databases
   *
   * @param requestParameters {@link GetConfigureDatabaseParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ShowDatabasesResponse>}
   */
  public CompletableFuture<ShowDatabasesResponse> getConfigureDatabaseAsync(
    @NonNull GetConfigureDatabaseParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildGetConfigureDatabaseRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ShowDatabasesResponse>() {})
    );
  }

  private Request buildGetConfigureDatabaseRequest(@NonNull GetConfigureDatabaseParameters requestParameters) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "api/v3/configure/database"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .setQueryParameter("format", requestParameters.getFormat().getValue())
      .build();
  }

  /**
   * Create a database
   *
   * @param createDatabaseRequest {@link CreateDatabaseRequest} Request Body
   * @return response of {@code void}
   */
  public void postConfigureDatabase(@NonNull CreateDatabaseRequest createDatabaseRequest) throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostConfigureDatabaseRequest(createDatabaseRequest);
    this.execute(request);
  }

  /**
   * Create a database
   *
   * @param createDatabaseRequest {@link CreateDatabaseRequest} Request Body
   * @return response of {@code CompletableFuture<Void>}
   */
  public CompletableFuture<Void> postConfigureDatabaseAsync(@NonNull CreateDatabaseRequest createDatabaseRequest)
    throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostConfigureDatabaseRequest(createDatabaseRequest);
    return this.executeAsync(request).thenApplyAsync(response -> null);
  }

  private Request buildPostConfigureDatabaseRequest(@NonNull CreateDatabaseRequest createDatabaseRequest) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "api/v3/configure/database"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .setJsonContent(createDatabaseRequest)
      .build();
  }

  /**
   * Delete a database
   *
   * @param requestParameters {@link DeleteConfigureDatabaseParameters} Request Parameters Object
   * @return response of {@code void}
   */
  public void deleteConfigureDatabase(@NonNull DeleteConfigureDatabaseParameters requestParameters) throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildDeleteConfigureDatabaseRequest(requestParameters);
    this.execute(request);
  }

  /**
   * Delete a database
   *
   * @param requestParameters {@link DeleteConfigureDatabaseParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<Void>}
   */
  public CompletableFuture<Void> deleteConfigureDatabaseAsync(
    @NonNull DeleteConfigureDatabaseParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildDeleteConfigureDatabaseRequest(requestParameters);
    return this.executeAsync(request).thenApplyAsync(response -> null);
  }

  private Request buildDeleteConfigureDatabaseRequest(@NonNull DeleteConfigureDatabaseParameters requestParameters) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "api/v3/configure/database"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .setQueryParameter("db", requestParameters.getDb())
      .build();
  }
}
