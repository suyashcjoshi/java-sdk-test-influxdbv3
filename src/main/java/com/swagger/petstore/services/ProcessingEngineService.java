// This file was generated by liblab | https://liblab.com/

package com.swagger.petstore.services;

import com.swagger.petstore.config.InfluxdbSdkConfig;
import com.swagger.petstore.exceptions.ApiError;
import com.swagger.petstore.exceptions.ErrorMessageException;
import com.swagger.petstore.http.Environment;
import com.swagger.petstore.http.HttpMethod;
import com.swagger.petstore.http.util.RequestBuilder;
import com.swagger.petstore.models.DeleteConfigureProcessingEngineTriggerParameters;
import com.swagger.petstore.models.ErrorMessage;
import com.swagger.petstore.models.PostDisableProcessingEngineTriggerParameters;
import com.swagger.petstore.models.PostEnableProcessingEngineTriggerParameters;
import com.swagger.petstore.models.PostInstallPluginPackagesParameters;
import com.swagger.petstore.models.PostInstallPluginRequirementsParameters;
import com.swagger.petstore.models.PostProcessingEnginePluginRequestParameters;
import com.swagger.petstore.models.ProcessingEngineTriggerRequest;
import com.swagger.petstore.validation.ViolationAggregator;
import com.swagger.petstore.validation.exceptions.ValidationException;
import com.swagger.petstore.validation.validators.modelValidators.PostDisableProcessingEngineTriggerParametersValidator;
import com.swagger.petstore.validation.validators.modelValidators.PostEnableProcessingEngineTriggerParametersValidator;
import com.swagger.petstore.validation.validators.modelValidators.ProcessingEngineTriggerRequestValidator;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;

/**
 * ProcessingEngineService Service
 */
public class ProcessingEngineService extends BaseService {

  public ProcessingEngineService(@NonNull OkHttpClient httpClient, InfluxdbSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * Create processing engine trigger
   *
   * @param processingEngineTriggerRequest {@link ProcessingEngineTriggerRequest} Request Body
   * @return response of {@code void}
   */
  public void postConfigureProcessingEngineTrigger(
    @NonNull ProcessingEngineTriggerRequest processingEngineTriggerRequest
  ) throws ApiError, ValidationException {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostConfigureProcessingEngineTriggerRequest(processingEngineTriggerRequest);
    this.execute(request);
  }

  /**
   * Create processing engine trigger
   *
   * @param processingEngineTriggerRequest {@link ProcessingEngineTriggerRequest} Request Body
   * @return response of {@code CompletableFuture<Void>}
   */
  public CompletableFuture<Void> postConfigureProcessingEngineTriggerAsync(
    @NonNull ProcessingEngineTriggerRequest processingEngineTriggerRequest
  ) throws ApiError, ValidationException {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostConfigureProcessingEngineTriggerRequest(processingEngineTriggerRequest);
    return this.executeAsync(request).thenApplyAsync(response -> null);
  }

  private Request buildPostConfigureProcessingEngineTriggerRequest(
    @NonNull ProcessingEngineTriggerRequest processingEngineTriggerRequest
  ) throws ValidationException {
    new ViolationAggregator()
      .add(
        new ProcessingEngineTriggerRequestValidator("processingEngineTriggerRequest")
          .required()
          .validate(processingEngineTriggerRequest)
      )
      .validateAll();
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "api/v3/configure/processing_engine_trigger"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .setJsonContent(processingEngineTriggerRequest)
      .build();
  }

  /**
   * Delete processing engine trigger
   *
   * @param requestParameters {@link DeleteConfigureProcessingEngineTriggerParameters} Request Parameters Object
   * @return response of {@code void}
   */
  public void deleteConfigureProcessingEngineTrigger(
    @NonNull DeleteConfigureProcessingEngineTriggerParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildDeleteConfigureProcessingEngineTriggerRequest(requestParameters);
    this.execute(request);
  }

  /**
   * Delete processing engine trigger
   *
   * @param requestParameters {@link DeleteConfigureProcessingEngineTriggerParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<Void>}
   */
  public CompletableFuture<Void> deleteConfigureProcessingEngineTriggerAsync(
    @NonNull DeleteConfigureProcessingEngineTriggerParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildDeleteConfigureProcessingEngineTriggerRequest(requestParameters);
    return this.executeAsync(request).thenApplyAsync(response -> null);
  }

  private Request buildDeleteConfigureProcessingEngineTriggerRequest(
    @NonNull DeleteConfigureProcessingEngineTriggerParameters requestParameters
  ) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "api/v3/configure/processing_engine_trigger"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .setQueryParameter("db", requestParameters.getDb())
      .setQueryParameter("trigger_name", requestParameters.getTriggerName())
      .setOptionalQueryParameter("force", requestParameters.getForce())
      .build();
  }

  /**
   * Disable processing engine trigger
   *
   * @param requestParameters {@link PostDisableProcessingEngineTriggerParameters} Request Parameters Object
   * @return response of {@code void}
   */
  public void postDisableProcessingEngineTrigger(
    @NonNull PostDisableProcessingEngineTriggerParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostDisableProcessingEngineTriggerRequest(requestParameters);
    this.execute(request);
  }

  /**
   * Disable processing engine trigger
   *
   * @param requestParameters {@link PostDisableProcessingEngineTriggerParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<Void>}
   */
  public CompletableFuture<Void> postDisableProcessingEngineTriggerAsync(
    @NonNull PostDisableProcessingEngineTriggerParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostDisableProcessingEngineTriggerRequest(requestParameters);
    return this.executeAsync(request).thenApplyAsync(response -> null);
  }

  private Request buildPostDisableProcessingEngineTriggerRequest(
    @NonNull PostDisableProcessingEngineTriggerParameters requestParameters
  ) throws ValidationException {
    new ViolationAggregator()
      .add(
        new PostDisableProcessingEngineTriggerParametersValidator("requestParameters")
          .required()
          .validate(requestParameters)
      )
      .validateAll();
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "api/v3/configure/processing_engine_trigger/disable"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .setJsonContent(requestParameters.getProcessingEngineTriggerRequest());
    if (requestParameters.getContentType() != null) {
      builder.setOptionalHeader("Content-Type", requestParameters.getContentType().getValue());
    }
    return builder.build();
  }

  /**
   * Enable processing engine trigger
   *
   * @param requestParameters {@link PostEnableProcessingEngineTriggerParameters} Request Parameters Object
   * @return response of {@code void}
   */
  public void postEnableProcessingEngineTrigger(@NonNull PostEnableProcessingEngineTriggerParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostEnableProcessingEngineTriggerRequest(requestParameters);
    this.execute(request);
  }

  /**
   * Enable processing engine trigger
   *
   * @param requestParameters {@link PostEnableProcessingEngineTriggerParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<Void>}
   */
  public CompletableFuture<Void> postEnableProcessingEngineTriggerAsync(
    @NonNull PostEnableProcessingEngineTriggerParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostEnableProcessingEngineTriggerRequest(requestParameters);
    return this.executeAsync(request).thenApplyAsync(response -> null);
  }

  private Request buildPostEnableProcessingEngineTriggerRequest(
    @NonNull PostEnableProcessingEngineTriggerParameters requestParameters
  ) throws ValidationException {
    new ViolationAggregator()
      .add(
        new PostEnableProcessingEngineTriggerParametersValidator("requestParameters")
          .required()
          .validate(requestParameters)
      )
      .validateAll();
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "api/v3/configure/processing_engine_trigger/enable"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .setJsonContent(requestParameters.getProcessingEngineTriggerRequest());
    if (requestParameters.getContentType() != null) {
      builder.setOptionalHeader("Content-Type", requestParameters.getContentType().getValue());
    }
    return builder.build();
  }

  /**
   * Install plugin packages
   *
   * @param requestParameters {@link PostInstallPluginPackagesParameters} Request Parameters Object
   * @return response of {@code void}
   */
  public void postInstallPluginPackages(@NonNull PostInstallPluginPackagesParameters requestParameters)
    throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostInstallPluginPackagesRequest(requestParameters);
    this.execute(request);
  }

  /**
   * Install plugin packages
   *
   * @param requestParameters {@link PostInstallPluginPackagesParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<Void>}
   */
  public CompletableFuture<Void> postInstallPluginPackagesAsync(
    @NonNull PostInstallPluginPackagesParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostInstallPluginPackagesRequest(requestParameters);
    return this.executeAsync(request).thenApplyAsync(response -> null);
  }

  private Request buildPostInstallPluginPackagesRequest(
    @NonNull PostInstallPluginPackagesParameters requestParameters
  ) {
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "api/v3/configure/plugin_environment/install_packages"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .setJsonContent(requestParameters.getRequestBody());
    if (requestParameters.getContentType() != null) {
      builder.setOptionalHeader("Content-Type", requestParameters.getContentType().getValue());
    }
    return builder.build();
  }

  /**
   * Install plugin requirements
   *
   * @param requestParameters {@link PostInstallPluginRequirementsParameters} Request Parameters Object
   * @return response of {@code void}
   */
  public void postInstallPluginRequirements(@NonNull PostInstallPluginRequirementsParameters requestParameters)
    throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostInstallPluginRequirementsRequest(requestParameters);
    this.execute(request);
  }

  /**
   * Install plugin requirements
   *
   * @param requestParameters {@link PostInstallPluginRequirementsParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<Void>}
   */
  public CompletableFuture<Void> postInstallPluginRequirementsAsync(
    @NonNull PostInstallPluginRequirementsParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostInstallPluginRequirementsRequest(requestParameters);
    return this.executeAsync(request).thenApplyAsync(response -> null);
  }

  private Request buildPostInstallPluginRequirementsRequest(
    @NonNull PostInstallPluginRequirementsParameters requestParameters
  ) {
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "api/v3/configure/plugin_environment/install_requirements"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .setJsonContent(requestParameters.getRequestBody());
    if (requestParameters.getContentType() != null) {
      builder.setOptionalHeader("Content-Type", requestParameters.getContentType().getValue());
    }
    return builder.build();
  }

  /**
   * Test WAL plugin
   *
   * @return response of {@code void}
   */
  public void postTestWalPlugin() throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostTestWalPluginRequest();
    this.execute(request);
  }

  /**
   * Test WAL plugin
   *
   * @return response of {@code CompletableFuture<Void>}
   */
  public CompletableFuture<Void> postTestWalPluginAsync() throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostTestWalPluginRequest();
    return this.executeAsync(request).thenApplyAsync(response -> null);
  }

  private Request buildPostTestWalPluginRequest() {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "api/v3/plugin_test/wal"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .build();
  }

  /**
   * Test scheduling plugin
   *
   * @return response of {@code void}
   */
  public void postTestSchedulingPlugin() throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostTestSchedulingPluginRequest();
    this.execute(request);
  }

  /**
   * Test scheduling plugin
   *
   * @return response of {@code CompletableFuture<Void>}
   */
  public CompletableFuture<Void> postTestSchedulingPluginAsync() throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostTestSchedulingPluginRequest();
    return this.executeAsync(request).thenApplyAsync(response -> null);
  }

  private Request buildPostTestSchedulingPluginRequest() {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "api/v3/plugin_test/schedule"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .build();
  }

  /**
   * On Request processing engine plugin request
   *
   * @param pluginPath String The path configured in the request trigger specification "path:\<plugin_path\>"` for the plugin. For example, if you define a trigger with the following: ```json trigger-spec: "path:hello-world" ``` then, the HTTP API exposes the following plugin endpoint:    ``` \<INFLUXDB3_HOST\>/api/v3/engine/hello-world ```
   * @return response of {@code void}
   */
  public void getProcessingEnginePluginRequest(@NonNull String pluginPath) throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildGetProcessingEnginePluginRequestRequest(pluginPath);
    this.execute(request);
  }

  /**
   * On Request processing engine plugin request
   *
   * @param pluginPath String The path configured in the request trigger specification "path:\<plugin_path\>"` for the plugin. For example, if you define a trigger with the following: ```json trigger-spec: "path:hello-world" ``` then, the HTTP API exposes the following plugin endpoint:    ``` \<INFLUXDB3_HOST\>/api/v3/engine/hello-world ```
   * @return response of {@code CompletableFuture<Void>}
   */
  public CompletableFuture<Void> getProcessingEnginePluginRequestAsync(@NonNull String pluginPath) throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildGetProcessingEnginePluginRequestRequest(pluginPath);
    return this.executeAsync(request).thenApplyAsync(response -> null);
  }

  private Request buildGetProcessingEnginePluginRequestRequest(@NonNull String pluginPath) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "api/v3/engine/{plugin_path}"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .setPathParameter("plugin_path", pluginPath)
      .build();
  }

  /**
   * On Request processing engine plugin request
   *
   * @param pluginPath String The path configured in the request trigger specification "path:\<plugin_path\>"` for the plugin. For example, if you define a trigger with the following: ```json trigger-spec: "path:hello-world" ``` then, the HTTP API exposes the following plugin endpoint:    ``` \<INFLUXDB3_HOST\>/api/v3/engine/hello-world ```
   * @param requestParameters {@link PostProcessingEnginePluginRequestParameters} Request Parameters Object
   * @return response of {@code void}
   */
  public void postProcessingEnginePluginRequest(
    @NonNull String pluginPath,
    @NonNull PostProcessingEnginePluginRequestParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostProcessingEnginePluginRequestRequest(pluginPath, requestParameters);
    this.execute(request);
  }

  /**
   * On Request processing engine plugin request
   *
   * @param pluginPath String The path configured in the request trigger specification "path:\<plugin_path\>"` for the plugin. For example, if you define a trigger with the following: ```json trigger-spec: "path:hello-world" ``` then, the HTTP API exposes the following plugin endpoint:    ``` \<INFLUXDB3_HOST\>/api/v3/engine/hello-world ```
   * @param requestParameters {@link PostProcessingEnginePluginRequestParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<Void>}
   */
  public CompletableFuture<Void> postProcessingEnginePluginRequestAsync(
    @NonNull String pluginPath,
    @NonNull PostProcessingEnginePluginRequestParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(401, ErrorMessage.class, ErrorMessageException.class);
    Request request = this.buildPostProcessingEnginePluginRequestRequest(pluginPath, requestParameters);
    return this.executeAsync(request).thenApplyAsync(response -> null);
  }

  private Request buildPostProcessingEnginePluginRequestRequest(
    @NonNull String pluginPath,
    @NonNull PostProcessingEnginePluginRequestParameters requestParameters
  ) {
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "api/v3/engine/{plugin_path}"
    )
      .setAccessTokenAuth(this.config.getAccessToken(), "Bearer")
      .setPathParameter("plugin_path", pluginPath)
      .setJsonContent(requestParameters.getRequestBody());
    if (requestParameters.getContentType() != null) {
      builder.setOptionalHeader("Content-Type", requestParameters.getContentType().getValue());
    }
    return builder.build();
  }
}
